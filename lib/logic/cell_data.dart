part of logic;

var defaultCellSize = 64.0;
var cellSize = defaultCellSize.toDouble();
var wantedCellSize = defaultCellSize;

final cells = {
  "empty",
  "place",
  "wall",
  "ghost",
  "mover",
  "puller",
  "grabber",
  "liner",
  "bird",
  "releaser",
  "fan",
  "wormhole",
  "generator",
  "generator_cw",
  "generator_ccw",
  "triplegen",
  "constructorgen",
  "crossgen",
  "physical_gen",
  "replicator",
  "tunnel",
  "stopper",
  "push",
  "slide",
  "rotator_cw",
  "rotator_ccw",
  "opposite_rotator",
  "gear_cw",
  "gear_ccw",
  "karl",
  "darty",
  "mirror",
  "enemy",
  "trash",
  "puzzle",
  "lock",
  "unlock",
  "key",
  "flag",
  "antipuzzle",
  "pmerge",
  "mech_gear",
  "mech_gen",
  "trash_puzzle",
  "mover_puzzle",
  "mech_mover",
  "pixel",
  "displayer",
  "mech_puller",
  "mech_grabber",
  "mech_fan",
  "mech_trash",
  "cross_mech_gear",
  "speed",
  "and_gate",
  "or_gate",
  "xor_gate",
  "not_gate",
  "nand_gate",
  "nor_gate",
  "xnor_gate",
  "onedir",
  "twodir",
  "threedir",
  "rotator_180",
  "redirector",
  "vacuum",
  "ant_cw",
  "ant_ccw",
  "driller",
  "silent_trash",
  "supgen",
  "supgen_cw",
  "supgen_ccw",
  "triple_supgen",
  "cross_supgen",
  "constructor_supgen",
  "super_mirror",
  "tunnel_cw",
  "tunnel_ccw",
  "triple_tunnel",
  "dual_tunnel",
  "warper",
  "warper_cw",
  "warper_ccw",
  "fast",
  "slow",
  "fast_mover",
  "slow_mover",
  "rotatable",
  "blue_place",
  "red_place",
  "yellow_place",
  "mobile_trash",
  "weight",
  "opposite_replicator",
  "cross_replicator",
  "physical_replicator",
  "triple_rep",
  "quad_rep",
  "semi_trash",
  "semi_enemy",
  "transformer",
  "transformer_cw",
  "transformer_ccw",
  "triple_transformer",
  "physical_gen_cw",
  "physical_gen_ccw",
  "axis",
  "bringer",
  "slow_puller",
  "fast_puller",
  "auto_flag",
  "anchor",
  "physical_trash",
  "physical_enemy",
  "hungry_trash",
  "conveyor",
  "swapper",
  "nudger",
  "ungeneratable",
  "unpushable",
  "unpullable",
  "ungrabbable",
  "unswappable",
  "untransformable",
  "doublegen",
  "double_supgen",
  "generatable",
  "grabbable",
  "pullable",
  "swappable",
  "transformable",
  "pushable",
  "propuzzle",
  "push_trash",
  "pull_trash",
  "grab_trash",
  "swap_trash",
  "gen_trash",
  "transform_trash",
  "puzzle_trash",
  "unstable_mover",
  "field",
  "collector",
  "thief",
  "magma",
  "snow",
  "time_trash",
  "consistent",
  "time_reset",
  "time_machine",
  "consistency",
  "time_hole",
  "mech_keyup",
  "mech_keyleft",
  "mech_keyright",
  "mech_rotator_cw",
  "mech_rotator_ccw",
  "rotator_rand",
  "mech_p_gen",
  "unstable_gen",
  "electron",
  "neutron",
  "proton",
  "sandbox",
  "mech_keydown",
  "counter",
  "forker",
  "forker_cw",
  "forker_ccw",
  "double_forker",
  "triple_forker",
  "graviton",
  "hawk",
  "pelican",
  "mech_toggle",
  "biome_cw",
  "biome_ccw",
  "desert",
  "snowy",
  "forest",
  "freezing",
  "trash_biome",
  "mechanical_halting",
  "quantum_biome",
  "plant_body",
  "plant_seed",
  "plant_spore",
  "plant_flower",
  "plant_leaf",
  "piston",
  "sand",
  "water",
  "mem_gen",
  "mem_gen_cw",
  "mem_gen_ccw",
  "mem_gen_double",
  "mem_gen_triple",
  "molten_puzzle",
  "frozen_puzzle",
  "unstable_puzzle",
  "temporal_puzzle",
  "robot",
  "keylimit",
  "assistant",
  "keyforce",
  "keyfake",
  "fire",
  "plasma",
  "cancer",
  "gas",
  "lava",
  "filler",
  "mech_sensor",
  "mech_comparator",
  "imply_gate",
  "nimply_gate",
  "airflow",
  "superfan",
  "strangelet",
  "no_burn_biome",
  "consistency_biome",
  "muon",
  "tau",
  "crystal",
  "floppy",
  "mech_stopper",
  "orbital",
  "inverse_graviton",
  "quantum_destroyer",
  "quantum_zypper",
  "portal_a",
  "portal_b",
  "inverse_airflow",
  "supervacuum",
  "transform_puzzle",
  "math_number",
  "math_plus",
  "math_minus",
  "math_mult",
  "math_div",
  "math_exp",
  "math_sqrt",
  "math_abs",
  "math_floor",
  "math_ceil",
  "math_log",
  "math_logn",
  "math_min",
  "math_max",
  "math_rng",
  "math_prng",
  "math_sin",
  "math_cos",
  "math_tan",
  "math_pi",
  "math_e",
  "math_phi",
  "math_infinity",
  "math_tick",
  "math_time",
  "math_memget",
  "math_memset",
  "math_memreader",
  "math_memwriter",
  "math_tunnel",
  "math_tunnel_cw",
  "math_cross_tunnel",
  "math_equal",
  "math_notequal",
  "math_greater",
  "math_less",
  "math_greater_equal",
  "math_less_equal",
  "math_switch",
  "math_mod",
  "math_to_mech",
  "mech_to_math",
  "math_sync",
  "spiketrap_biome",
  "spikefactory",
  "explosive",
  "super_redirector",
  "factory",
  "checkpoint",
  "mech_checkpoint",
  "mobile_enemy",
  "mover_trash",
  "mover_enemy",
  "lofter",
  "trash_can",
  "mech_enemy",
  "mech_p_trash",
  "bulldozer",
  "math_wireless_tunnel",
  "math_safe_number",
  "biome_norot",
  "mech_mirror",
  "master_get_camx",
  "master_get_camy",
  "master_get_mousex",
  "master_get_mousey",
  "master_get_rot",
  "master_get_lastrot",
  "master_has_id",
  "master_has_idx",
}.toList();

final cursorTextures = ["cursor", ...cells, "invis_tool", "trick_tool"]..removeWhere((e) => e == "empty");

final textureMapBackup = Map.from(textureMap);

Map<String, String> textureMap = {
  "master_get_camx.png": "master/getter/master_get_camx.png",
  "master_get_camy.png": "master/getter/master_get_camy.png",
  "master_get_mousex.png": "master/getter/master_get_mousex.png",
  "master_get_mousey.png": "master/getter/master_get_mousey.png",
  "master_get_rot.png": "master/getter/master_get_rot.png",
  "master_get_lastrot.png": "master/getter/master_get_lastrot.png",
  "master_has_id.png": "master/checker/master_has_id.png",
  "master_has_idx.png": "master/checker/master_has_idx.png",
  "mech_mirror.png": "mechanical/users/mech_mirror.png",
  "biome_norot.png": "backgrounds/biomes/biome_norot.png",
  "math_safe_number.png": "math/math_safe_number.png",
  "math_wireless_tunnel.png": "math/tunnels/math_wireless_tunnel.png",
  "bulldozer.png": "movers/movers/bulldozer.png",
  "mech_enemy.png": "mechanical/users/mech_enemy.png",
  "mech_p_trash.png": "mechanical/users/mech_p_trash.png",
  "trash_can.png": "destroyers/trash/trash_can.png",
  "lofter.png": "movers/combos/lofter.png",
  "mover_trash.png": "movers/movers/mover_trash.png",
  "mover_enemy.png": "movers/movers/mover_enemy.png",
  "mobile_enemy.png": "destroyers/enemy/mobile_enemy.png",
  "checkpoint.png": "puzzle/checkpoint.png",
  "mech_checkpoint.png": "mechanical/users/mech_checkpoint.png",
  "super_redirector.png": "rotators/super_redirector.png",
  "factory.png": "recreators/factory.png",
  "explosive.png": "destroyers/enemy/explosive.png",
  "spikefactory.png": "unique/spikefactory.png",
  "spiketrap_biome.png": "backgrounds/biomes/spiketrap_biome.png",
  "math_sync.png": "math/math_sync.png",
  "math_to_mech.png": "unique/math_to_mech.png",
  "mech_to_math.png": "unique/mech_to_math.png",
  "math_switch.png": "math/logic/math_switch.png",
  "math_greater_equal.png": "math/logic/math_greater_equal.png",
  "math_less_equal.png": "math/logic/math_less_equal.png",
  "math_equal.png": "math/logic/math_equal.png",
  "math_notequal.png": "math/logic/math_notequal.png",
  "math_greater.png": "math/logic/math_greater.png",
  "math_less.png": "math/logic/math_less.png",
  "math_number.png": "math/math_number.png",
  "math_plus.png": "math/core/math_plus.png",
  "math_minus.png": "math/core/math_minus.png",
  "math_mult.png": "math/core/math_mult.png",
  "math_div.png": "math/core/math_div.png",
  "math_mod.png": "math/core/math_mod.png",
  "math_exp.png": "math/core/math_exp.png",
  "math_sqrt.png": "math/core/math_sqrt.png",
  "math_abs.png": "math/functions/math_abs.png",
  "math_floor.png": "math/functions/math_floor.png",
  "math_ceil.png": "math/functions/math_ceil.png",
  "math_log.png": "math/functions/math_log.png",
  "math_logn.png": "math/functions/math_logn.png",
  "math_min.png": "math/functions/math_min.png",
  "math_max.png": "math/functions/math_max.png",
  "math_rng.png": "math/functions/math_rng.png",
  "math_prng.png": "math/functions/math_prng.png",
  "math_sin.png": "math/functions/tri/math_sin.png",
  "math_cos.png": "math/functions/tri/math_cos.png",
  "math_tan.png": "math/functions/tri/math_tan.png",
  "math_pi.png": "math/data/math_pi.png",
  "math_e.png": "math/data/math_e.png",
  "math_phi.png": "math/data/math_phi.png",
  "math_infinity.png": "math/data/math_infinity.png",
  "math_tick.png": "math/data/math_tick.png",
  "math_time.png": "math/data/math_time.png",
  "math_memget.png": "math/memory/math_memget.png",
  "math_memset.png": "math/memory/math_memset.png",
  "math_memreader.png": "math/memory/math_memreader.png",
  "math_memwriter.png": "math/memory/math_memwriter.png",
  "math_tunnel.png": "math/tunnels/math_tunnel.png",
  "math_tunnel_cw.png": "math/tunnels/math_tunnel_cw.png",
  "math_cross_tunnel.png": "math/tunnels/math_cross_tunnel.png",
  "transform_puzzle.png": "puzzle/transform_puzzle.png",
  "inverse_airflow.png": "movers/pullers/inverse_airflow.png",
  "supervacuum.png": "movers/pullers/supervacuum.png",
  "portal_a.png": "unique/portal/portal_a.png",
  "portal_b.png": "unique/portal/portal_b.png",
  "quantum_zypper.png": "quantum/quantum_zypper.png",
  "quantum_destroyer.png": "quantum/quantum_destroyer.png",
  "orbital.png": "quantum/orbital.png",
  "inverse_graviton.png": "quantum/inverse_graviton.png",
  "mech_stopper.png": "mechanical/users/mech_stopper.png",
  "floppy.png": "unique/floppy.png",
  "crystal.png": "unique/crystal.png",
  "muon.png": "quantum/muon.png",
  "tau.png": "quantum/tau.png",
  "no_burn_biome.png": "backgrounds/biomes/no_burn_biome.png",
  "consistency_biome.png": "backgrounds/biomes/consistency_biome.png",
  "strangelet.png": "quantum/strangelet.png",
  "airflow.png": "movers/movers/airflow.png",
  "superfan.png": "movers/movers/superfan.png",
  "imply_gate.png": "mechanical/gates/imply_gate.png",
  "nimply_gate.png": "mechanical/gates/nimply_gate.png",
  "mech_sensor.png": "mechanical/mech_sensor.png",
  "mech_comparator.png": "mechanical/mech_comparator.png",
  "filler.png": "recreators/filler.png",
  "lava.png": "destroyers/lava.png",
  "gas.png": "unique/gas.png",
  "plasma.png": "destroyers/plasma.png",
  "cancer.png": "destroyers/cancer.png",
  "fire.png": "destroyers/fire.png",
  "darty.png": "unique/darty.png",
  "cursor.png": "interface/cursor.png",
  "karl.png": "unique/karl.png",
  "enemy.png": "destroyers/enemy/enemy.png",
  "back.png": "interface/back.png",
  "wall.png": "push/wall.png",
  "ghost.png": "push/ghost.png",
  "sandbox.png": "unique/sandbox.png",
  "wormhole.png": "destroyers/wormhole.png",
  "stopper.png": "unique/stopper.png",
  "pixel.png": "mechanical/pixel.png",
  "pixel_on.png": "mechanical/pixel_on.png",
  "and_gate.png": "mechanical/gates/and_gate.png",
  "nand_gate.png": "mechanical/gates/nand_gate.png",
  "or_gate.png": "mechanical/gates/or_gate.png",
  "nor_gate.png": "mechanical/gates/nor_gate.png",
  "xor_gate.png": "mechanical/gates/xor_gate.png",
  "xnor_gate.png": "mechanical/gates/xnor_gate.png",
  "not_gate.png": "mechanical/gates/not_gate.png",
  "cross_mech_gear.png": "mechanical/cross_mech_gear.png",
  "mech_gear.png": "mechanical/mech_gear.png",
  "displayer.png": "mechanical/displayer.png",
  "mech_fan.png": "mechanical/users/mech_fan.png",
  "mech_grabber.png": "mechanical/users/mech_grabber.png",
  "mech_mover.png": "mechanical/users/mech_mover.png",
  "mech_puller.png": "mechanical/users/mech_puller.png",
  "mech_p_gen.png": "mechanical/users/mech_p_gen.png",
  "mech_trash.png": "mechanical/mech_trash.png",
  "mech_gen.png": "mechanical/mech_gen.png",
  "robot.png": "puzzle/robot.png",
  "keylimit.png": "puzzle/keylimit.png",
  "keyforce.png": "puzzle/keyforce.png",
  "keyfake.png": "puzzle/keyfake.png",
  "assistant.png": "puzzle/assistant.png",
  "molten_puzzle.png": "puzzle/molten_puzzle.png",
  "frozen_puzzle.png": "puzzle/frozen_puzzle.png",
  "unstable_puzzle.png": "puzzle/unstable_puzzle.png",
  "temporal_puzzle.png": "puzzle/temporal_puzzle.png",
  "mem_gen.png": "recreators/memory/mem_gen.png",
  "mem_gen_cw.png": "recreators/memory/mem_gen_cw.png",
  "mem_gen_ccw.png": "recreators/memory/mem_gen_ccw.png",
  "mem_gen_double.png": "recreators/memory/mem_gen_double.png",
  "mem_gen_triple.png": "recreators/memory/mem_gen_triple.png",
  "sand.png": "unique/sand.png",
  "water.png": "unique/water.png",
  "piston.png": "mechanical/piston.png",
  "plant_body.png": "unique/plant/body.png",
  "plant_leaf.png": "unique/plant/leaf.png",
  "plant_seed.png": "unique/plant/seed.png",
  "plant_spore.png": "unique/plant/spore.png",
  "plant_flower.png": "unique/plant/flower.png",
  "freezing.png": "backgrounds/biomes/freezing.png",
  "trash_biome.png": "backgrounds/biomes/trash_biome.png",
  "mechanical_halting.png": "backgrounds/biomes/mechanical_halting.png",
  "quantum_biome.png": "backgrounds/biomes/quantum_biome.png",
  "biome_cw.png": "backgrounds/biomes/biome_cw.png",
  "biome_ccw.png": "backgrounds/biomes/biome_ccw.png",
  "desert.png": "backgrounds/biomes/desert.png",
  "snowy.png": "backgrounds/biomes/snowy.png",
  "forest.png": "backgrounds/biomes/forest.png",
  "forker.png": "recreators/forkers/forker.png",
  "forker_cw.png": "recreators/forkers/forker_cw.png",
  "forker_ccw.png": "recreators/forkers/forker_ccw.png",
  "double_forker.png": "recreators/forkers/double_forker.png",
  "triple_forker.png": "recreators/forkers/triple_forker.png",
  "counter.png": "destroyers/trash/counter.png",
  "proton.png": "quantum/proton.png",
  "neutron.png": "quantum/neutron.png",
  "electron.png": "quantum/electron.png",
  "graviton.png": "quantum/graviton.png",
  "unstable_gen.png": "quantum/unstable_gen.png",
  'zoomin.png': 'interface/zoomin.png',
  'zoomout.png': 'interface/zoomout.png',
  "rotator_rand.png": "rotators/rand_rotator.png",
  "mech_keyup.png": "mechanical/key_up.png",
  "mech_keydown.png": "mechanical/key_down.png",
  "mech_keyleft.png": "mechanical/key_left.png",
  "mech_keyright.png": "mechanical/key_right.png",
  "mech_rotator_cw.png": "mechanical/rotator_cw.png",
  "mech_rotator_ccw.png": "mechanical/rotator_ccw.png",
  "time_machine.png": "unique/time_travel/time_machine.png",
  "consistency.png": "unique/time_travel/consistency.png",
  "time_hole.png": "unique/time_travel/time_hole.png",
  "time_trash.png": "unique/time_travel/time_trash.png",
  "consistent.png": "unique/time_travel/consistent.png",
  "time_reset.png": "unique/time_travel/time_reset.png",
  "magma.png": "heat/magma.png",
  "snow.png": "heat/snow.png",
  "collector.png": "movers/pullers/collector.png",
  "field.png": "quantum/field.png",
  "unstable_mover.png": "quantum/unstable_mover.png",
  "push_trash.png": "destroyers/trash/push_trash.png",
  "pull_trash.png": "destroyers/trash/pull_trash.png",
  "grab_trash.png": "destroyers/trash/grab_trash.png",
  "swap_trash.png": "destroyers/trash/swap_trash.png",
  "gen_trash.png": "destroyers/trash/gen_trash.png",
  "transform_trash.png": "destroyers/trash/transform_trash.png",
  "puzzle_trash.png": "destroyers/trash/puzzle_trash.png",
  "generatable.png": "push/restricted/Only/generatable.png",
  "grabbable.png": "push/restricted/Only/grabbable.png",
  "pullable.png": "push/restricted/Only/pullable.png",
  "swappable.png": "push/restricted/Only/swappable.png",
  "transformable.png": "push/restricted/Only/transformable.png",
  "pushable.png": "push/restricted/Only/pushable.png",
  'ungeneratable.png': "push/restricted/Ungeneratable.png",
  'unpushable.png': "push/restricted/Unpushable.png",
  'unpullable.png': "push/restricted/Unpullable.png",
  'ungrabbable.png': "push/restricted/Ungrabbable.png",
  'unswappable.png': "push/restricted/Unswappable.png",
  'untransformable.png': "push/restricted/Untransformable.png",
  'propuzzle.png': 'puzzle/propuzzle.png',
  'mover.png': 'movers/movers/mover.png',
  'puller.png': 'movers/pullers/puller.png',
  'speed.png': 'movers/speeds/speed.png',
  'grabber.png': 'movers/grabbers/grabber.png',
  'conveyor.png': 'movers/grabbers/conveyor.png',
  'swapper.png': 'movers/drillers/swapper.png',
  'nudger.png': 'movers/speeds/nudger.png',
  'bird.png': 'movers/movers/bird.png',
  'liner.png': 'movers/combos/liner.png',
  'gear_cw.png': 'movers/gear_cw.png',
  'gear_ccw.png': 'movers/gear_ccw.png',
  'push.png': 'push/push.png',
  'slide.png': 'push/slide.png',
  'rotator_cw.png': 'rotators/rotator_cw.png',
  'rotator_ccw.png': 'rotators/rotator_ccw.png',
  'opposite_rotator.png': 'rotators/opposite_rotator.png',
  'onedir.png': 'push/onedir.png',
  'twodir.png': 'push/twodir.png',
  'threedir.png': 'push/threedir.png',
  'rotator_180.png': 'rotators/rotator_180.png',
  'redirector.png': 'rotators/redirector.png',
  'vacuum.png': 'movers/pullers/vacuum.png',
  'ant_cw.png': 'movers/ant_cw.png',
  'ant_ccw.png': 'movers/ant_ccw.png',
  'driller.png': 'movers/drillers/driller.png',
  'silent_trash.png': 'destroyers/trash/silent_trash.png',
  'supgen.png': 'recreators/supgens/supgen.png',
  'supgen_cw.png': 'recreators/supgens/supgen_cw.png',
  'supgen_ccw.png': 'recreators/supgens/supgen_ccw.png',
  'triple_supgen.png': 'recreators/supgens/triple_supgen.png',
  'cross_supgen.png': 'recreators/supgens/cross_supgen.png',
  'constructor_supgen.png': 'recreators/supgens/constructor_supgen.png',
  'generator.png': 'recreators/generators/generator.png',
  'generator_cw.png': 'recreators/generators/generator_cw.png',
  'generator_ccw.png': 'recreators/generators/generator_ccw.png',
  'trash.png': 'destroyers/trash/trash.png',
  'replicator.png': 'recreators/replicators/replicator.png',
  'constructorgen.png': 'recreators/generators/constructorgen.png',
  'triplegen.png': 'recreators/generators/triplegen.png',
  'crossgen.png': 'recreators/generators/crossgen.png',
  'physical_gen.png': 'recreators/generators/physical_gen.png',
  'puzzle.png': 'puzzle/puzzle.png',
  'antipuzzle.png': 'puzzle/antipuzzle.png',
  'lock.png': 'puzzle/lock.png',
  'unlock.png': 'puzzle/unlock.png',
  'trash_puzzle.png': 'puzzle/trash_puzzle.png',
  'mover_puzzle.png': 'puzzle/mover_puzzle.png',
  'key.png': 'puzzle/key.png',
  'flag.png': 'puzzle/flag.png',
  'pmerge.png': 'puzzle/pmerge.png',
  'mirror.png': 'movers/mirrors/mirror.png',
  'super_mirror.png': 'movers/mirrors/super_mirror.png',
  'tunnel.png': 'recreators/tunnels/tunnel.png',
  'tunnel_cw.png': 'recreators/tunnels/tunnel_cw.png',
  'tunnel_ccw.png': 'recreators/tunnels/tunnel_ccw.png',
  'dual_tunnel.png': 'recreators/tunnels/dual_tunnel.png',
  'triple_tunnel.png': 'recreators/tunnels/triple_tunnel.png',
  'warper.png': 'recreators/tunnels/warpers/warper.png',
  'warper_cw.png': 'recreators/tunnels/warpers/warper_cw.png',
  'warper_ccw.png': 'recreators/tunnels/warpers/warper_ccw.png',
  'curve.png': 'curves/curve.png',
  'straight_curve.png': 'curves/curve_straight.png',
  'cross_straight_curve.png': 'curves/cross_straight_curve.png',
  'cross_curve.png': 'curves/cross_curve.png',
  'slow.png': 'movers/speeds/slow.png',
  'fast.png': 'movers/speeds/fast.png',
  'slow_mover.png': 'movers/movers/slow_mover.png',
  'fast_mover.png': 'movers/movers/fast_mover.png',
  'fan.png': 'movers/movers/fan.png',
  'releaser.png': 'movers/movers/releaser.png',
  'place.png': 'backgrounds/place.png',
  'red_place.png': 'backgrounds/red_place.png',
  'blue_place.png': 'backgrounds/blue_place.png',
  'yellow_place.png': 'backgrounds/yellow_place.png',
  'rotatable.png': 'backgrounds/rotatable.png',
  'mobile_trash.png': 'destroyers/trash/mobile_trash.png',
  'weight.png': 'push/weight.png',
  'opposite_replicator.png': 'recreators/replicators/opposite_replicator.png',
  'cross_replicator.png': 'recreators/replicators/cross_rep.png',
  'physical_replicator.png': 'recreators/replicators/physical_rep.png',
  'triple_rep.png': 'recreators/replicators/triple_rep.png',
  'quad_rep.png': 'recreators/replicators/quad_rep.png',
  'semi_trash.png': 'destroyers/trash/semi_trash.png',
  'semi_enemy.png': 'destroyers/enemy/semi_enemy.png',
  'transformer.png': 'recreators/transformers/transformer.png',
  'transformer_cw.png': 'recreators/transformers/transformer_cw.png',
  'transformer_ccw.png': 'recreators/transformers/transformer_ccw.png',
  'triple_transformer.png': 'recreators/transformers/triple_transformer.png',
  'physical_gen_cw.png': 'recreators/generators/physical_gen_cw.png',
  'physical_gen_ccw.png': 'recreators/generators/physical_gen_ccw.png',
  'axis.png': 'movers/combos/axis.png',
  'bringer.png': 'movers/combos/bringer.png',
  'fast_puller.png': 'movers/pullers/fast_puller.png',
  'slow_puller.png': 'movers/pullers/slow_puller.png',
  'auto_flag.png': 'puzzle/auto_flag.png',
  'anchor.png': 'unique/anchor.png',
  'physical_trash.png': 'destroyers/trash/physical_trash.png',
  'physical_enemy.png': 'destroyers/enemy/physical_enemy.png',
  'hungry_trash.png': 'destroyers/trash/hungry_trash.png',
  'tool.png': 'interface/tools.png',
  'blueprint.png': 'interface/blueprints.png',
  'doublegen.png': 'recreators/generators/doublegen.png',
  'double_supgen.png': 'recreators/supgens/double_supgen.png',
  'thief.png': 'movers/grabbers/thief.png',
  'inc_brush.png': 'interface/increase_brush.png',
  'dec_brush.png': 'interface/decrease_brush.png',
  'inctab.png': 'interface/inctab.png',
  'dectab.png': 'interface/dectab.png',
  'pelican.png': 'movers/grabbers/pelican.png',
  'hawk.png': 'movers/pullers/hawk.png',
  'mech_toggle.png': 'mechanical/mech_toggle.png',
  "invis_tool.png": "interface/tools/invis_tool.png",
  "trick_tool.png": "interface/tools/trick_tool.png",
};

class CellProfile {
  String title;
  String description;

  CellProfile(this.title, this.description);
}

class CellCategory {
  String title;
  String description;
  String look;
  List items;
  bool opened = false;
  int max;

  CellCategory(this.title, this.description, this.items, this.look, {this.max = 3});

  String toString() => title.toLowerCase().replaceAll(" ", "_");
}

final categories = [
  CellCategory(
    "Tools",
    "Tools to make your life easier",
    [
      CellCategory(
        "Blueprints",
        "These will override your pasteboard so you can paste them",
        [],
        "blueprint",
      ),
      "dec_brush",
      "inc_brush",
      "zoomout",
      "zoomin",
      "dectab",
      "inctab",
      "invis_tool",
      "trick_tool",
    ],
    "tool",
  ),
  CellCategory(
    "Base",
    "Base cells",
    [
      "empty",
      CellCategory(
        "Push Cells",
        "Cells that can be pushed under specific conditions",
        [
          "push",
          "slide",
          "onedir",
          "twodir",
          "threedir",
          "mobile_trash",
          "weight",
        ],
        "push",
        max: 3,
      ),
      CellCategory(
        "Constraints",
        "Can only eat, be pushed, or not be pushed by a specific force",
        [
          "unpushable",
          "unpullable",
          "ungrabbable",
          "unswappable",
          "ungeneratable",
          "untransformable",
          "antipuzzle",
          "pushable",
          "pullable",
          "grabbable",
          "swappable",
          "generatable",
          "transformable",
          "propuzzle",
          "push_trash",
          "pull_trash",
          "grab_trash",
          "swap_trash",
          "gen_trash",
          "transform_trash",
          "puzzle_trash",
        ],
        "unpushable",
        max: 7,
      ),
      "wall",
      "ghost",
      CellCategory(
        "Placeables",
        "Also known as backgrounds, cells can be placed on top of these, which determines the cell's behavior when in puzzle mode",
        [
          "place",
          "yellow_place",
          "blue_place",
          "red_place",
          "rotatable",
        ],
        "place",
        max: 3,
      ),
      CellCategory(
        "Biomes",
        "Placeables/backgrounds that interact with the cell above it every tick",
        [
          "biome_cw",
          "biome_ccw",
          "biome_norot",
          "desert",
          "snowy",
          "forest",
          "freezing",
          "trash_biome",
          "spiketrap_biome",
          "mechanical_halting",
          "quantum_biome",
          "no_burn_biome",
          "consistency_biome",
        ],
        "biome_cw",
      ),
    ],
    "ghost",
  ),
  CellCategory(
    "Movers",
    "Cells that move themselves or other cells",
    [
      CellCategory(
        "Movers",
        "They move forwards, pushing cells forward",
        [
          "mover",
          "slow_mover",
          "fast_mover",
          "bird",
          "mover_trash",
          "mover_enemy",
          "releaser",
          "bulldozer",
        ],
        "mover",
        max: 3,
      ),
      CellCategory(
        "Pullers",
        "They move forwards, pulling the cells behind it, but can't push",
        [
          "puller",
          "slow_puller",
          "fast_puller",
          "collector",
          "hawk",
        ],
        "puller",
      ),
      CellCategory(
        "Grabbers",
        "They grab cells on their sides, they can't push neither themselves nor the grabbed cells",
        [
          "grabber",
          "thief",
          "pelican",
        ],
        "grabber",
      ),
      "driller",
      CellCategory(
        "Speeds",
        "They move forward but can't push, pull, grab or drill",
        [
          "speed",
          "slow",
          "fast",
        ],
        "speed",
      ),
      CellCategory(
        "Combinations",
        "Combinations of the base movers",
        [
          "liner",
          "axis",
          "bringer",
          "lofter",
        ],
        "liner",
      ),
    ],
    "mover",
  ),
  CellCategory(
    "Forcers",
    "Cells that move other cells but don't move themselves",
    [
      CellCategory(
        "Fans",
        "They push cells away",
        [
          "fan",
          "superfan",
          "airflow",
        ],
        "fan",
      ),
      CellCategory(
        "Vacuums",
        "They pull cells towards themselves",
        [
          "vacuum",
          "supervacuum",
          "inverse_airflow",
        ],
        "vacuum",
      ),
      "conveyor",
      "swapper",
      "nudger",
      CellCategory(
        "Mirrors",
        "They swap cells around themselves",
        ["mirror", "super_mirror"],
        "mirror",
      ),
      "gear_cw",
      "gear_ccw",
      "ant_cw",
      "ant_ccw",
      "anchor",
    ],
    "fan",
  ),
  CellCategory(
    "Recreators",
    "Cells that copy or create other cells",
    [
      CellCategory(
        "Generators",
        "They copy the cell behind them towards where the arrow is facing",
        [
          "generator",
          "generator_cw",
          "generator_ccw",
          "doublegen",
          "triplegen",
          "constructorgen",
          "crossgen",
          "physical_gen",
          "physical_gen_cw",
          "physical_gen_ccw",
        ],
        "generator",
        max: 7,
      ),
      CellCategory(
        "Super Generators",
        "Generators that generate entire rows of cells",
        [
          "supgen",
          "supgen_cw",
          "supgen_ccw",
          "double_supgen",
          "triple_supgen",
          "cross_supgen",
          "constructor_supgen",
        ],
        "supgen",
        max: 4,
      ),
      CellCategory(
        "Memory Generator",
        "Generators that remember what they have last generated and when there's nothing behind them, they will keep generating said cell",
        [
          "mem_gen",
          "mem_gen_cw",
          "mem_gen_ccw",
          "mem_gen_double",
          "mem_gen_triple",
        ],
        "mem_gen",
      ),
      CellCategory(
        "Replicators",
        "They recreate the cell in front of them, in front of them",
        [
          "replicator",
          "cross_replicator",
          "opposite_replicator",
          "triple_rep",
          "quad_rep",
          "physical_replicator",
        ],
        "replicator",
      ),
      CellCategory(
        "Tunnels",
        "They move cells from their back to their front",
        [
          "tunnel",
          "tunnel_cw",
          "tunnel_ccw",
          "dual_tunnel",
          "triple_tunnel",
          "warper",
          "warper_cw",
          "warper_ccw",
        ],
        "tunnel",
        max: 5,
      ),
      CellCategory(
        "Forkers",
        "A cell comes in from the back, a copy of it comes out front",
        [
          "forker",
          "forker_cw",
          "forker_ccw",
          "triple_forker",
          "double_forker",
        ],
        "forker",
      ),
      CellCategory(
        "Transformers",
        "They transform the cell as many tiles away as the offset into a copy of the cell behind them",
        [
          "transformer",
          "transformer_cw",
          "transformer_ccw",
          "triple_transformer",
        ],
        "transformer",
      ),
      "factory",
      "filler",
    ],
    "generator",
  ),
  CellCategory(
    "Rotators",
    "Cells that rotate other cells",
    [
      "rotator_cw",
      "rotator_ccw",
      "rotator_180",
      "rotator_rand",
      "redirector",
      "super_redirector",
      "opposite_rotator",
    ],
    "rotator_cw",
  ),
  CellCategory(
    "Destroyers",
    "They destroy or eat other cells",
    [
      CellCategory(
        "Enemy",
        "When they kill, they also die",
        [
          "enemy",
          "semi_enemy",
          "mobile_enemy",
          "physical_enemy",
          "explosive",
          "mech_enemy",
        ],
        "enemy",
      ),
      CellCategory(
        "Trash",
        "They kill without dying",
        [
          "trash",
          "silent_trash",
          "semi_trash",
          "mobile_trash",
          "physical_trash",
          "trash_can",
          "counter",
          "push_trash",
          "pull_trash",
          "grab_trash",
          "swap_trash",
          "gen_trash",
          "transform_trash",
          "puzzle_trash",
          "mech_p_trash",
        ],
        "trash",
        max: 7,
      ),
      CellCategory(
        "Portals",
        "Trash cells that try to send a copy of the incoming cell somewhere else",
        [
          "portal_a",
          "portal_b",
          "wormhole",
        ],
        "wormhole",
      ),
      "hungry_trash",
      "fire",
      "lava",
      "plasma",
      "cancer",
      "strangelet",
    ],
    "trash",
  ),
  CellCategory(
    "Unique Cells",
    "Special cells that don't fit any other category",
    [
      "stopper",
      CellCategory(
        "Quantum Cells",
        "A whole new type of physics lies in this category",
        [
          "unstable_mover",
          "unstable_gen",
          "field",
          "quantum_zypper",
          "proton",
          "neutron",
          "electron",
          "muon",
          "tau",
          "graviton",
          "strangelet",
          "orbital",
          "inverse_graviton",
          "quantum_destroyer",
        ],
        "unstable_mover",
      ),
      CellCategory(
        "Time Travel",
        "Can send stuff, including time, back to the initial state. Make sure you don't make a time paradox!",
        [
          "time_trash",
          "time_reset",
          "time_hole",
          "time_machine",
          "consistent",
          "consistency",
        ],
        "time_trash",
      ),
      CellCategory(
        "Heat Cells",
        "Cells can now be hot or cool",
        [
          "magma",
          "snow",
        ],
        "magma",
      ),
      CellCategory(
        "Living Cells",
        "Cells can now live through the power of AI",
        [
          "karl",
          "darty",
          "plant_seed",
        ],
        "plant_seed",
      ),
      "anchor",
      "sandbox",
      CellCategory(
        "Physical Cells",
        "These cells behave the same way no matter their rotation",
        [
          "water",
          "sand",
          "gas",
          "lava",
          "plasma",
        ],
        "water",
      ),
      "crystal",
      "floppy",
      "spikefactory",
    ],
    "unstable_mover",
  ),
  CellCategory(
    "Mathematical Cells",
    "Cells designed to do math",
    [
      "counter",
      "math_number",
      "math_safe_number",
      "math_to_mech",
      "math_sync",
      CellCategory(
        "Core",
        "The minimum you expect from a mathematical system",
        [
          "math_plus",
          "math_minus",
          "math_mult",
          "math_div",
          "math_mod",
          "math_exp",
          "math_sqrt",
        ],
        "math_plus",
        max: 4,
      ),
      CellCategory(
        "Functions",
        "Operations a bit more complex than the Core ones",
        [
          "math_abs",
          "math_floor",
          "math_ceil",
          "math_log",
          "math_logn",
          "math_min",
          "math_max",
          "math_rng",
          "math_prng",
          "math_sin",
          "math_cos",
          "math_tan",
        ],
        "math_abs",
        max: 4,
      ),
      CellCategory(
        "Logic",
        "If the condition is true they output a one, otherwise, a zero",
        [
          "math_equal",
          "math_greater",
          "math_less",
          "math_notequal",
          "math_greater_equal",
          "math_less_equal",
          "math_switch",
        ],
        "math_equal",
        max: 3,
      ),
      CellCategory(
        "Variables",
        "Cells designed to carry their own numbers. Not all are constants",
        [
          "math_pi",
          "math_e",
          "math_phi",
          "math_infinity",
          "math_tick",
          "math_time",
        ],
        "math_pi",
      ),
      CellCategory(
        "Numerical Memory",
        "Designed to store numbers in global space",
        [
          "math_memreader",
          "math_memwriter",
          "math_memget",
          "math_memset",
        ],
        "math_memreader",
        max: 2,
      ),
      CellCategory(
        "Math Tunnels",
        "Designed to link distant inputs and outputs with wires",
        [
          "math_tunnel",
          "math_tunnel_cw",
          "math_cross_tunnel",
          "math_wireless_tunnel",
        ],
        "math_cross_tunnel",
        max: 2,
      )
    ],
    "math/math_block",
  ),
  CellCategory(
    "Mechanical Cells",
    "Cells that use mechanical gears and interactions to process data",
    [
      "mech_gear",
      "cross_mech_gear",
      "mech_toggle",
      "displayer",
      "mech_to_math",
      CellCategory(
        "Power Givers",
        "They give cells mechanical power",
        [
          "mech_gen",
          "mech_trash",
          "mech_sensor",
          "mech_comparator",
          "mech_keyleft",
          "mech_keydown",
          "mech_keyup",
          "mech_keyright",
        ],
        "mech_gen",
        max: 4,
      ),
      CellCategory(
        "Users",
        "Cells that only work when they receive mechanical power",
        [
          "mech_mover",
          "mech_puller",
          "mech_grabber",
          "mech_p_gen",
          "mech_fan",
          "mech_rotator_cw",
          "mech_rotator_ccw",
          "mech_stopper",
          "mech_checkpoint",
          "mech_enemy",
          "mech_p_trash",
          "mech_mirror",
          "pixel",
          "piston",
          "keylimit",
          "keyforce",
          "keyfake",
        ],
        "mech_mover",
        max: 6,
      ),
      CellCategory(
        "Logic Gates",
        "They take mechanical inputs and throw a mechanical output based off of a logical operation",
        [
          "and_gate",
          "or_gate",
          "xor_gate",
          "imply_gate",
          "nand_gate",
          "nor_gate",
          "xnor_gate",
          "nimply_gate",
          "not_gate",
        ],
        "and_gate",
        max: 3,
      ),
    ],
    "mech_gear",
  ),
  CellCategory(
    "Master Cells",
    "Cells that can manipulate or interact with the grid.\nThese are extremely complicated to use, and generally require an advanced understanding of the game's internals\nThese aren't allowed when solving vaults!",
    [
      CellCategory(
        "Getters",
        "They can be read as a number, and give information about either the grid or currently selected cells",
        [
          "master_get_camx",
          "master_get_camy",
          "master_get_mousex",
          "master_get_mousey",
          "master_get_rot",
          "master_get_lastrot",
        ],
        "master_get_camx",
      ),
      CellCategory(
        "Checkers",
        "They output a mechanical signal when updating if the thing they're checking for is correct",
        [
          "master_has_id",
          "master_has_idx",
        ],
        "master_has_id",
      ),
    ],
    "master_has_id",
  ),
  CellCategory(
    "Puzzle Cells",
    "Cells made to be used in puzzles",
    [
      "puzzle",
      CellCategory(
        "Merged",
        "Puzzle Cells with extra abilities",
        [
          "molten_puzzle",
          "frozen_puzzle",
          "unstable_puzzle",
          "trash_puzzle",
          "mover_puzzle",
          "temporal_puzzle",
          "transform_puzzle",
        ],
        "molten_puzzle",
      ),
      "antipuzzle",
      "propuzzle",
      "pmerge",
      CellCategory(
        "Interactables",
        "These cells will react to being interacted by a Puzzle Cell",
        [
          "key",
          "lock",
          "checkpoint",
          "flag",
        ],
        "flag",
        max: 2,
      ),
      "auto_flag",
      CellCategory(
        "Key Processors",
        "They do stuff related to pressing keys to make puzzles more difficult",
        [
          "keylimit",
          "keyforce",
          "keyfake",
        ],
        "keylimit",
      ),
      "robot",
      "assistant",
    ],
    "puzzle",
  ),
];

final defaultProfile = CellProfile("Unnamed", "No description available");

String profileToMessage(CellProfile profile) {
  return "${profile.title} - ${profile.description}";
}

final cellInfo = <String, CellProfile>{
  "empty": CellProfile(
    "Empty",
    "Placing it will erase what was before it. You can also right click to erase as well",
  ),
  "wall": CellProfile("Wall", "Can't be moved, but can be generated"),
  "ghost": CellProfile("Ghost Wall", "Can't be moved nor generated"),
  "place": CellProfile(
    "Placeable",
    "Allows the player to pick up the cell on top of this and place it on other placeable tiles",
  ),
  "mover": CellProfile("Mover", "Moves forward, can push forward"),
  "puller": CellProfile(
    "Puller",
    "Moves forward, unable to push, but instead pulls all cells behind it",
  ),
  "grabber": CellProfile(
    "Grabber",
    "Moves forward, unable to push, grabs everything on its sides",
  ),
  "liner": CellProfile(
    "Liner",
    "Moves, pushes and pulls, basically puller + pusher",
  ),
  "bird": CellProfile(
    "Bird",
    "It flies around and does its thing, its a bird after all (Moves in a zigzag pattern when facing right/left, moves in a straight line when facing up/down, rotates clockwise if it can't move)",
  ),
  "releaser": CellProfile(
    "Releaser",
    "A mover, that prevents the cell in front of it from updating. If it can't move, it will allow the cell in front of it to update",
  ),
  "fan": CellProfile(
    "Fan",
    "It pushes the cell in front of it away",
  ),
  "wormhole": CellProfile(
    "Wormhole",
    "When wrap mode is on, any cell that falls in will be spawned on the opposite side of the map. Can be buggy. Acts like trash cell if wrap mode is off",
  ),
  "generator": CellProfile(
    "Generator",
    "Generates the cell behind it in front of it",
  ),
  "generator_cw": CellProfile(
    "Generator CW",
    "Generates the cell behind it to the right of it, rotating it clockwise",
  ),
  "generator_ccw": CellProfile(
    "Generator CCW",
    "Generates the cell behind it to the left of it, rotating it counter-clockwise",
  ),
  "triplegen": CellProfile(
    "Triple Generator",
    "Basically Generator, Generator CW and Generator CCW combined as one",
  ),
  "constructorgen": CellProfile(
    "Constructor",
    "Triple generator except also generates the cell behind it front-left and front-right to it with no applied rotation",
  ),
  "crossgen": CellProfile(
    "Cross Generator",
    "Two generators perpendicular to eachother stacked as one",
  ),
  "replicator": CellProfile(
    "Replicator",
    "Generates the cell in front of it... in front of it.",
  ),
  "karl": CellProfile(
    "Karl",
    "It will try to avoid any cells it sees unless if it is a wall, as it is chemosynthetic and thus eats rocks. It can also self-replicate",
  ),
  "darty": CellProfile(
    "Darty",
    "Moves forward. If it can push the cell in front, it eats it and replicates. If it can't push nor move, it turns then moves",
  ),
  "push": CellProfile(
    "Push",
    "Can be pushed from any side",
  ),
  "slide": CellProfile(
    "Slide",
    "Can only be pushed from the sides parallel to the 2 white lines",
  ),
  "rotator_cw": CellProfile(
    "Rotator CW",
    "Rotates adjacent cells clockwise",
  ),
  "rotator_ccw": CellProfile(
    "Rotator CCW",
    "Rotates adjacent cells counter-clockwise",
  ),
  "gear_cw": CellProfile(
    "Gear CW",
    "Spins surrounding cells clockwise around itself",
  ),
  "gear_ccw": CellProfile(
    "Gear CCW",
    "Spins surrounding cells counter-clockwise around itself",
  ),
  "mirror": CellProfile(
    "Mirror",
    "Swaps the cells the arrows are pointing to, if able",
  ),
  "enemy": CellProfile(
    "Enemy",
    "When something moves into it, it destroys it then dies",
  ),
  "trash": CellProfile(
    "Trash",
    "Eats all cells that move into it",
  ),
  "puzzle": CellProfile(
    "Puzzle",
    "It's you! Can be moved with the arrow keys when the game is running. When it moves a cell it is touching, it \"interacts\" with it",
  ),
  "key": CellProfile(
    "Key",
    "Can be picked up by player by interacting with it",
  ),
  "lock": CellProfile(
    "Lock",
    "Can't be moved, except if the player has a key when interacting with it, in which case it unlocks itself and becomes pushable",
  ),
  "flag": CellProfile(
    "Flag",
    "When a puzzle cell interacts with it, and there are no enemy cells on the grid, you win!",
  ),
  "antipuzzle": CellProfile(
    "Anti-Puzzle",
    "Can be pushed by any cell except the puzzle cell",
  ),
  "tunnel": CellProfile(
    "Tunnel",
    "Moves the cell from the back to the front",
  ),
  "physical_gen": CellProfile(
    "Physical Generator",
    "A generator, except if it can't push the cell in front of it, it tries to move backwards to make space",
  ),
  "pmerge": CellProfile(
    "PuzzleMerge™",
    "Using the latest quantum Sci-Fi stuff, we can combine specific cells with your puzzle cell to give it special abilities!",
  ),
  "sync": CellProfile(
    "Sync Cell",
    "If you move or rotate it, it also moves or rotates all the other sync cells",
  ),
  "opposite_rotator": CellProfile(
    "Opposite Rotator",
    "On one side we have a Rotator CW, on the opposite side a Rotator CCW, and in between, a push cell",
  ),
  "stopper": CellProfile(
    "Stopper",
    "Stops the cell in front of it from updating",
  ),
  "mech_mover": CellProfile(
    "Mechanically Powered Mover",
    "Only moves if it receives mechanical power",
  ),
  "mech_gear": CellProfile(
    "Mechanical Gear",
    "Can carry mechanical energy through spinning",
  ),
  "mech_gen": CellProfile(
    "Constant Mechanical Generator",
    "This cell breaks the laws of physics and generates a constant stream of mechanical energy in front of it",
  ),
  "pixel": CellProfile(
    "WiFi Pixel",
    "Turns white if powered or receiving a WiFi signal",
  ),
  "displayer": CellProfile(
    "WiFi Displayer",
    "When powered, sends WiFi signal to the WiFi Pixel in front of it from any distance, even through other cells",
  ),
  "mech_puller": CellProfile(
    "Mechanically Powered Puller",
    "Only pulls and moves if it receives mechanical power",
  ),
  "mech_grabber": CellProfile(
    "Mechanically Powered Grabber",
    "Only grabs and moves if it receives mechanical power",
  ),
  "mech_fan": CellProfile(
    "Mechanically Powered Fan",
    "Only pushes if it receives mechanical power",
  ),
  "mech_trash": CellProfile(
    "Trash-Based Mechanical Generator",
    "Generates mechanical signals around it whenever it eats a cell, unless the countdown is above 0 in which case it will decrease the countdown by 1 instead.",
  ),
  "cross_mech_gear": CellProfile(
    "Cross Mechanical Gear",
    "It's like two gears stacked on top of each-other",
  ),
  "and_gate": CellProfile(
    "AND Gate",
    "Takes 2 inputs and outputs the result of their AND operation",
  ),
  "or_gate": CellProfile(
    "OR Gate",
    "Takes 2 inputs and outputs the result of their OR operation",
  ),
  "xor_gate": CellProfile(
    "XOR Gate",
    "Takes 2 inputs and outputs the result of their XOR operation",
  ),
  "not_gate": CellProfile(
    "NOT Gate",
    "Takes 1 input and outputs the opposite of that input",
  ),
  "nand_gate": CellProfile(
    "NAND Gate",
    "Takes 2 inputs and outputs the opposite result of their AND operation",
  ),
  "nor_gate": CellProfile(
    "NOR Gate",
    "Takes 2 inputs and outputs the opposite result of their OR operation",
  ),
  "xnor_gate": CellProfile(
    "XNOR Gate",
    "Takes 2 inputs and outputs the opposite result of their XOR operation",
  ),
  "rotator_180": CellProfile(
    "180 Degree Rotator",
    "Rotates adjacent cells 180 degrees",
  ),
  "redirector": CellProfile(
    "Redirector",
    "Sets rotation of the cell in front of it to the same rotation as the redirector",
  ),
  "vacuum": CellProfile(
    "Vacuum",
    "Pulls the cell 2 tiles in front of it towards itself",
  ),
  "onedir": CellProfile(
    "One Directional",
    "Can only be pushed in one direction",
  ),
  "twodir": CellProfile(
    "Two Directional",
    "Can only be pushed backwards and downwards",
  ),
  "threedir": CellProfile(
    "Three Directional",
    "Can only be pushed in three directions... You likely get the point by now",
  ),
  "ant_cw": CellProfile(
    "Wheel CW",
    "It spins clockwise, and that moves it",
  ),
  "ant_ccw": CellProfile(
    "Wheel CCW",
    "It spins counter-clockwise, and that moves it",
  ),
  "driller": CellProfile(
    "Driller",
    "It moves forward, and if a cell is in front of it, it will swap that cell with itself",
  ),
  "speed": CellProfile(
    "Speed",
    "Moves forward, can't push",
  ),
  "silent_trash": CellProfile(
    "Silent Trash Cell",
    "Trash Cell that doesn't make a noise",
  ),
  "supgen": CellProfile(
    "Super Generator",
    "Generates the entire row behind it in front of it",
  ),
  "supgen_cw": CellProfile(
    "Super Generator CW",
    "Generates the entire row behind it on its right, rotating the row clockwise",
  ),
  "supgen_ccw": CellProfile(
    "Super Generator CCW",
    "Generates the entire row behind it on its left, rotating the row counter-clockwise",
  ),
  "cross_supgen": CellProfile(
    "Cross Super Generator",
    "2 Super Generators orthogonal to eachother stacked on top of one another",
  ),
  "triple_supgen": CellProfile(
    "Triple Super Generator",
    "Generates the entire row behind it on its left, right and front",
  ),
  "constructor_supgen": CellProfile(
    "Super Constructor",
    "Superior version of the constructor",
  ),
  "super_mirror": CellProfile(
    "Super Mirror",
    "A mirror that swaps entire rows",
  ),
  "tunnel_cw": CellProfile(
    "Tunnel CW",
    "A tunnel curved clockwise",
  ),
  "tunnel_ccw": CellProfile(
    "Tunnel CCW",
    "A tunnel curved counter-clockwise",
  ),
  "dual_tunnel": CellProfile(
    "Dual Tunnel",
    "Moves the cell behind it into 2 positions by breaking physics",
  ),
  "triple_tunnel": CellProfile(
    "Triple Tunnel",
    "Dual Tunnel + Tunnel. Breaks physics even more. Are there generators inside this thing?",
  ),
  "warper": CellProfile(
    "Warper",
    "A stackable tunnel. Behaves like a tunnel, but if multiple warpers are in front of it, it will tunnel the cell to front of them",
  ),
  "warper_cw": CellProfile(
    "Warper CW",
    "A warper bent clockwise",
  ),
  "warper_ccw": CellProfile(
    "Warper CCW",
    "A warper bent counter-clockwise",
  ),
  "fast": CellProfile(
    "Fast",
    "Speed but moves twice as fast",
  ),
  "slow": CellProfile(
    "Slow",
    "Speed but moves half as much (once every 2 ticks)",
  ),
  "blue_place": CellProfile(
    "Blue Placeable",
    "Allows the player to pick up the cell on top of it and place it on other blue placeable tiles",
  ),
  "red_place": CellProfile(
    "Red Placeable",
    "Allows the player to pick up the cell on top of it and place it on other red placeable tiles",
  ),
  "yellow_place": CellProfile(
    "Yellow Placeable",
    "Allows the player to pick up the cell on top of it and place it on other yellow placeable tiles",
  ),
  "rotatable": CellProfile(
    "Rotatable",
    "When a player clicks on a rotatable tile, it rotates the cell",
  ),
  "slow_mover": CellProfile(
    "Slow Mover",
    "Mover that moves half as much (once every 2 ticks)",
  ),
  "fast_mover": CellProfile(
    "Fast Mover",
    "Mover that moves twice every tick",
  ),
  "mobile_trash": CellProfile(
    "Mobile Trash",
    "Acts like a push cell, but when moved, the cell in front of it will die",
  ),
  "weight": CellProfile(
    "Weight",
    "A push cell but with a mass of 1. This means it can stop 1 mover, but 2 would still push it",
  ),
  "cross_replicator": CellProfile(
    "Cross Replicator",
    "2 replicators 90 degrees apart from each-other stacked as one",
  ),
  "opposite_replicator": CellProfile(
    "Opposite Replicator",
    "2 replicators opposite of each-other stacked as one",
  ),
  "triple_rep": CellProfile(
    "Triple Replicator",
    "3 replicators stacked as one",
  ),
  "quad_rep": CellProfile(
    "Quad Replicator",
    "4 replicators stacked as one",
  ),
  "physical_replicator": CellProfile(
    "Physical Replicator",
    "Like the physical generator as a replicator, but may cause more bugs",
  ),
  "transformer": CellProfile(
    "Transformer",
    "This cell is quite over-powered. It will turn the cell as many spaces away as the offset (default: 1) into a copy of the cell behind it.",
  ),
  "transformer_cw": CellProfile(
    "Transformer CW",
    "Transformer bent clockwise",
  ),
  "transformer_ccw": CellProfile(
    "Transformer CCW",
    "Transformer bent counter-clockwise",
  ),
  "triple_transformer": CellProfile(
    "Triple Transformer",
    "Transformer + Transformer CW + Transformer CCW. Always has an offset of 1 due to being multi-directional.",
  ),
  "semi_enemy": CellProfile(
    "Semi Enemy",
    "Half Enemy, Half Push (Can be pushed from two sides)",
  ),
  "semi_trash": CellProfile(
    "Semi Trash",
    "Half Trash, Half Push (Can be pushed from two sides)",
  ),
  "auto_flag": CellProfile(
    "AutoFlag",
    "Automatically triggers a win if there are no enemies, no locks and no keys left",
  ),
  "axis": CellProfile(
    "Axis",
    "Grabber + Puller + Mover",
  ),
  "bringer": CellProfile(
    "Bringer",
    "Grabber + Driller",
  ),
  "physical_gen_cw": CellProfile(
    "Physical Generator CW",
    "Physical Generator bent clockwise",
  ),
  "physical_gen_ccw": CellProfile(
    "Physical Generator CCW",
    "Physical Generator bent counter-clockwise",
  ),
  "fast_puller": CellProfile(
    "Fast Puller",
    "Puller but moves twice as fast",
  ),
  "slow_puller": CellProfile(
    "Slow Puller",
    "Puller but moves half as much (once every 2 ticks)",
  ),
  "anchor": CellProfile(
    "Anchor",
    "When rotated, it will rotate the structure touching it. Anchored rotators also stop rotating mid-execution to avoid bugs",
  ),
  "hungry_trash": CellProfile(
    "Hungry Trash",
    "Will go for cells around it to eat. Can eat anything. It splits for each cell it eats. If there is food on opposite sides it won't eat nor split",
  ),
  "physical_trash": CellProfile(
    "Physical Trash",
    "Trash, but if something moves into it by pushing, it will push the cell on opposite side away.",
  ),
  "physical_enemy": CellProfile(
    "Physical Enemy",
    "Enemy variant of physical trash",
  ),
  "conveyor": CellProfile(
    "Conveyor",
    "Grabs two sides and moves them forward, but does not move itself",
  ),
  "nudger": CellProfile(
    "Nudger",
    "Fan that does not have any force, can only push 1 cell per tick.",
  ),
  "swapper": CellProfile(
    "Swapper",
    "Swaps 2 cells in front of it with each-other",
  ),
  "ungeneratable": CellProfile(
    "Ungeneratable",
    "Can't be generated by a generator, tunnel, warper or replicator",
  ),
  "unpushable": CellProfile(
    "Unpushable",
    "Can't be pushed",
  ),
  "unpullable": CellProfile(
    "Unpullable",
    "Can't be pulled",
  ),
  "ungrabbable": CellProfile(
    "Ungrabbable",
    "Can't be grabbed",
  ),
  "unswappable": CellProfile(
    "Unswappable",
    "Can't be mirrored or drilled",
  ),
  "untransformable": CellProfile(
    "Untransformable",
    "Can't be forced to transform into stuff and is ignored by transformers",
  ),
  "unstable_mover": CellProfile(
    "Unstable Mover",
    "Moves forward but when there's a cell in front of it, it will jump over it",
  ),
  "field": CellProfile(
    "Field",
    "Goes to a random spot in the level, sometimes generating random cells",
  ),
  "time_trash": CellProfile(
    "Time Trash",
    "When it eats a cell, it will reset time and turn itself into the cell it ate",
  ),
  "time_reset": CellProfile(
    "Time Reset",
    "When it eats a cell, it will reset time without transforming itself",
  ),
  "consistent": CellProfile(
    "Consistent",
    "Does not get reset by time travelling. This does not mean its old version will also stop existing, it will get duplicated",
  ),
  "magma": CellProfile(
    "Magma",
    "Heats up nearby cells. Cells that reach a heat of 100 will turn into Magma",
  ),
  "snow": CellProfile(
    "Snow",
    "Cools down nearby cells. Cells that reach a heat of -100 or cold of 100 will turn into Snow",
  ),
  "time_machine": CellProfile(
    "Time Machine",
    "When powered, it will send the entire structure it is attached to back in time",
  ),
  "time_hole": CellProfile(
    "Time Hole",
    "When a cell gets adjacent it, it will be sucked into it and put back in time, but does not time travel.",
  ),
  "consistency": CellProfile(
    "Consistency",
    "Makes all of the cells have the Consistency effect, making them behave like a Consistent cell (does not get reset by time travel)",
  ),
  "inc_brush": CellProfile(
    "Increase Brush Size",
    "Increases the brush size, allowing you to place multiple cells at once",
  ),
  "dec_brush": CellProfile(
    "Decrease Brush Size",
    "Decreases the brush size",
  ),
  "zoomin": CellProfile(
    "Zoom In",
    "Moves the camera closer to the grid",
  ),
  "zoomout": CellProfile(
    "Zoom Out",
    "Moves the camera away from the grid, allowing you to see more",
  ),
  "inctab": CellProfile(
    "Increase Tab",
    "Disabled in Multiplayer. In a world it will cycle through the worlds. In the normal editor, it will send you one grid tab higher.",
  ),
  "dectab": CellProfile(
    "Decrease Tab",
    "Disabled in Multiplayer. In a world it will cycle through the worlds. In the normal editor, it will send you one grid tab lower.",
  ),
  "proton": CellProfile(
    "Wannabe-Proton",
    "Raycasts in 8 directions and based off of the first particle it sees it will go towards it.\nElectron: Towards\nProton: Away\nNeutron: Towards\nGraviton: Towards",
  ),
  "electron": CellProfile(
    "Wannabe-Electron",
    "Raycasts in 8 directions and based off of the first particle it sees it will go towards it.\nElectron: Away\nProton: Towards\nNeutron: Ignores\nGraviton: Towards",
  ),
  "neutron": CellProfile(
    "Wannabe-Neutron",
    "Raycasts in 8 directions and based off of the first particle it sees it will go towards it.\nElectron: Ignores\nProton: Towards\nNeutron: Ignores\nGraviton: Towards",
  ),
  "sandbox": CellProfile(
    "The Sandbox Cell",
    "Places cells at random positions, but does not move itself",
  ),
  "pushable": CellProfile(
    "Pushable",
    "Can only be pushed, also can't be generated",
  ),
  "pullable": CellProfile(
    "Pullable",
    "Can only be pulled, also can't be generated",
  ),
  "grabbable": CellProfile(
    "Grabbable",
    "Can only be grabbed, also can't be generated",
  ),
  "swappable": CellProfile(
    "Swappable",
    "Can only be swapped, meaning it can only be interacted by mirrors and drillers, also can't be generated",
  ),
  "generatable": CellProfile(
    "Generatable",
    "Can't be moved but can be generated",
  ),
  "transformable": CellProfile(
    "Transformable",
    "Can't be moved but can be transformed",
  ),
  "propuzzle": CellProfile(
    "Pro-Puzzle",
    "Can only be moved by puzzle cell's force",
  ),
  "push_trash": CellProfile(
    "Push Trash",
    "Can only eat stuff that is pushed inside",
  ),
  "pull_trash": CellProfile(
    "Pull Trash",
    "Can only eat stuff that is pulled inside",
  ),
  "grab_trash": CellProfile(
    "Grab Trash",
    "Can only eat stuff that is moved inside by grabbing",
  ),
  "swap_trash": CellProfile(
    "Swap Trash",
    "Can only eat stuff that is moved inside by swapping",
  ),
  "gen_trash": CellProfile(
    "Generator Trash",
    "Trash that can't be generated",
  ),
  "transform_trash": CellProfile(
    "Transformer Trash",
    "Trash that can't be transformed",
  ),
  "puzzle_trash": CellProfile(
    "Puzzle Trash",
    "Can only eat stuff that is moved inside by puzzle cell",
  ),
  "doublegen": CellProfile(
    "Double Generator",
    "Generator CW + Generator CCW",
  ),
  "double_supgen": CellProfile(
    "Double Super Generator",
    "Super Generator CW + Super Generator CCW",
  ),
  "rotator_rand": CellProfile(
    "Random Rotator",
    "Rotates the cells around it either CW or CCW at random",
  ),
  "mech_keyup": CellProfile(
    "Mechanical Up Key",
    "Sends out a mechanical signal in 4 directions if the up arrow key is pressed",
  ),
  "mech_keyleft": CellProfile(
    "Mechanical Left Key",
    "Sends out a mechanical signal if the left arrow key is pressed",
  ),
  "mech_keyright": CellProfile(
    "Mechanical Right Key",
    "Sends out a mechanical signal if the right arrow key is pressed",
  ),
  "mech_p_gen": CellProfile(
    "Mechanically Powered Generator",
    "A generator that only generates if powered",
  ),
  "mech_rotator_cw": CellProfile(
    "Mechanically Powered Rotator CW",
    "A rotator CW that only rotates if powered",
  ),
  "mech_rotator_ccw": CellProfile(
    "Mechanically Powered Rotator CCW",
    "A rotator CCW that only rotates if powered",
  ),
  "unstable_gen": CellProfile(
    "Unstable Generator",
    "Generator that can generate anything through anything",
  ),
  "mech_keydown": CellProfile(
    "Mechanical Down Key",
    "Sends out a mechanical signal if the down arrow key is pressed",
  ),
  "thief": CellProfile(
    "Thief",
    "Releaser, but as a Grabber",
  ),
  "collector": CellProfile(
    "Collector",
    "Releaser, but as a Puller",
  ),
  "counter": CellProfile(
    "Counter",
    "Trash cell that counts how many cells came in",
  ),
  "forker": CellProfile(
    "Forker",
    "A cell comes in, a copy comes out in front",
  ),
  "forker_cw": CellProfile(
    "Forker CW",
    "Forker bent clockwise",
  ),
  "forker_ccw": CellProfile(
    "Forker CCW",
    "Forker bent counter-clockwise",
  ),
  "triple_forker": CellProfile(
    "Triple Forker",
    "Forker + Forker CW + Forker CCW",
  ),
  "double_forker": CellProfile(
    "Double Forker",
    "Forker CW + Forker CCW",
  ),
  "graviton": CellProfile(
    "Graviton",
    "It is only attracted to other Gravitons, but all particles are attracted to it",
  ),
  "hawk": CellProfile(
    "Hawk",
    "Like a bird, but it pulls cells",
  ),
  "pelican": CellProfile(
    "Pelican",
    "Like a bird, but it grabs cells",
  ),
  "mech_toggle": CellProfile(
    "Mechanical Toggle",
    "When it gets a mechanical input from the back, it toggles between generating mechanical power and doing nothing",
  ),
  "biome_cw": CellProfile(
    "Biome CW",
    "A biome that rotates the cell above it clockwise",
  ),
  "biome_ccw": CellProfile(
    "Biome CCW",
    "A biome that rotates the cell above it counter-clockwise",
  ),
  "desert": CellProfile(
    "Desert",
    "A biome that increases the heat of the cell above it",
  ),
  "snowy": CellProfile(
    "Snowy",
    "A biome that decreases the heat or increases the cold of the cell above it",
  ),
  "forest": CellProfile(
    "Forest",
    "A biome that resets the heat and cold of the cell above it to 0",
  ),
  "freezing": CellProfile(
    "Freezing Biome",
    "A biome that stops the cell above it from updating",
  ),
  "trash_biome": CellProfile(
    "Trash Biome",
    "A biome that eats the cell above it",
  ),
  "mechanical_halting": CellProfile(
    "Mechanical Halting",
    "A biome that makes any mechanical gear above it stop transmitting mechanical signals",
  ),
  "quantum_biome": CellProfile(
    "Quantum Biome",
    "A biome that transforms the cell above it into a random cell",
  ),
  "plant_seed": CellProfile(
    "Plant Seed",
    "It can only live 30 ticks with no food. If a wall is nearby, it will take all the food in it. It will also then grow into a plant. This is also the controller of the plant.",
  ),
  "plant_flower": CellProfile(
    "Plant Flower",
    "It can only live 30 ticks with no food. It is where the Seed will order the spores to be shot out of.",
  ),
  "plant_spore": CellProfile(
    "Plant Spore",
    "Contains a copy of the DNA and randomly changes direction. If it tries to move into an immovable object or out of the grid, it will turn into a seed with that DNA sligtly mutated.",
  ),
  "plant_body": CellProfile(
    "Plant Body",
    "The body of the plant. It can only live 30 ticks with no food. When the plant is formed, this is where the flowers will come out of. They also try to protect the plant from non-plant parts.",
  ),
  "plant_leaf": CellProfile(
    "Plant Leaf",
    "Dies after 30 ticks with no food. This is like a body, but it also produces extra energy for the plant.",
  ),
  "piston": CellProfile(
    "Piston",
    "While powered, it will push like a Fan. When turned off, it will pull once like a Vacuum",
  ),
  "sand": CellProfile(
    "Sand",
    "Moves down. If it can't, it will move left-down. If it still can't, it will move right-down.",
  ),
  "water": CellProfile(
    "Water",
    "Like Sand but if it fails to move, it will move left. If it still can't, it will move right.",
  ),
  "mem_gen": CellProfile(
    "Memory Generator",
    "Will remember what it generated and if it has nothing to generate, it will generate that cell",
  ),
  "mem_gen_cw": CellProfile(
    "Memory Generator CW",
    "Memory Generator but bent clockwise",
  ),
  "mem_gen_ccw": CellProfile(
    "Memory Generator CCW",
    "Memory Generator but bent counter-clockwise",
  ),
  "mem_gen_double": CellProfile(
    "Memory Double Generator",
    "Memory Generator CW + Memory Generator CCW",
  ),
  "mem_gen_triple": CellProfile(
    "Memory Triple Generator",
    "Memory Generator + Memory Generator CW + Memory Generator CCW",
  ),
  "molten_puzzle": CellProfile(
    "Molten Puzzle",
    "A puzzle cell that also heats up the cell in the direction you're moving in if it can't move it",
  ),
  "frozen_puzzle": CellProfile(
    "Frozen Puzzle",
    "A puzzle cell that also freezes the cell in the direction you're moving in if it can't move it",
  ),
  "unstable_puzzle": CellProfile(
    "Unstable Puzzle",
    "A mix of Puzzle cell and Unstable Mover (jumps over cells in front of it)",
  ),
  "temporal_puzzle": CellProfile(
    "Temporal Puzzle",
    "Puzzle cell but you can time travel by pressing T",
  ),
  "mover_puzzle": CellProfile(
    "Mover Puzzle",
    "Puzzle cell but it constantly moves forward",
  ),
  "trash_puzzle": CellProfile(
    "Trash Puzzle",
    "Puzzle cell but if it can't push the cell in front of it, it eats that cell",
  ),
  "robot": CellProfile(
    "Robot",
    "Will first try to get all available keys, unlock all doors, and then kill enemies by moving into them (which does kill it as well)",
  ),
  "keylimit": CellProfile(
    "Key Limit",
    "When powered, if you press the key based on its rotation, it will make you lose the level",
  ),
  "assistant": CellProfile(
    "Assistant",
    "Will first try to get all available keys, unlock the first door they can get, and push it continuously",
  ),
  "keyforce": CellProfile(
    "Key Force",
    "When powered, if you don't press the key based on its rotation, it will make you lose the level",
  ),
  "keyfake": CellProfile(
    "Key Fake",
    "When powered, it will force you to press the key based on its rotation",
  ),
  "load_bp": CellProfile(
    "Load Blueprint",
    "Load Blueprint from clipboard",
  ),
  "fire": CellProfile(
    "Fire",
    "Dies after 1 tick, but spreads onto burnable cells including fire cells with a different ID",
  ),
  "plasma": CellProfile(
    "Plasma",
    "Spreads onto burnable cells including plasmas with a different ID, but also behaves like Gas",
  ),
  "cancer": CellProfile(
    "Cancer",
    "Spreads onto burnable cells including cancer with a different ID. Doesn't die, doesn't behave like another cell, just spreads.",
  ),
  "gas": CellProfile(
    "Gas",
    "Like water but goes up instead of down. Does attempt to move down when it can't go up or sideways.",
  ),
  "lava": CellProfile(
    "Lava",
    "Spreads onto burnable cells including lava with a different ID, but also behaves like Water",
  ),
  "filler": CellProfile(
    "Filler",
    "Spreads itself onto air in all 4 directions",
  ),
  "mech_sensor": CellProfile(
    "Sensor",
    "Gives power in the back when a cell is in front (by specified offset amount)",
  ),
  "mech_comparator": CellProfile(
    "Comparator",
    "Gives power in the left and right if a cell is in front (by specified offset amount) and its rotation and type is the same as the cell in the back",
  ),
  "imply_gate": CellProfile(
    "IMPLY Gate",
    "Takes 2 inputs and outputs the result of their IMPLY operation",
  ),
  "nimply_gate": CellProfile(
    "NIMPLY Gate",
    "Takes 2 inputs and outputs the result of their NIMPLY operation",
  ),
  "airflow": CellProfile(
    "Airflow",
    "Like a Super Fan, but it goes through other Airflows",
  ),
  "superfan": CellProfile(
    "Super Fan",
    "Like a fan, but infinite range",
  ),
  "strangelet": CellProfile(
    "Stangelet",
    "A destructive monster. Attracted a lot to Gravitons, Protons and Neutrons, and much weaker to Electrons and other Strangelets. Also spreads to burnable cells.",
  ),
  "no_burn_biome": CellProfile(
    "Fire Extinguisher Biome",
    "Makes the cell above unburnable. Unburnable cells are ignored by Fire, Cancer, Lava, Plasma and Strangelet.",
  ),
  "consistency_biome": CellProfile(
    "Consistency Biome",
    "The cell on top won't be reset by time travel using the power of science (fiction)",
  ),
  "muon": CellProfile(
    "Muon",
    "Electron but twice the force",
  ),
  "tau": CellProfile(
    "Tau",
    "Electron but 4 times the force",
  ),
  "crystal": CellProfile(
    "Crystal",
    "Moves in random directions until it touches another Crystal cell with the same ID",
  ),
  "floppy": CellProfile(
    "Floppy",
    "A programmable mover. At the start, put a cell behind, to the left and to the right of it's bottom (the direction it moves in) and when it sees that cell it will turn towards that direction",
  ),
  "mech_stopper": CellProfile(
    "Mechanically Powered Stopper",
    "Stopper but only stops when powered with a mechanical signal",
  ),
  "inverse_graviton": CellProfile(
    "Inverse Graviton",
    "Like a graviton but negative mass",
  ),
  "orbital": CellProfile(
    "Orbital",
    "Only attracts neutrons and protons 1/5 of the normal force, but is attracted by neutrons, protons, orbitals, gravitons and inverse gravitons at normal force and tries to stay 5 blocks away",
  ),
  "quantum_destroyer": CellProfile(
    "Quantum Destroyer",
    "Attracted to neutrons, repells electrons, muons and taus with a force 10 times their mass",
  ),
  "quantum_zypper": CellProfile(
    "Quantum Zypper",
    "The Quantum Zypper\nWhen there's a cell in front of it, it will jump over it. Otherwise it will not move.",
  ),
  "portal_a": CellProfile(
    "Portal A",
    "A trash cell, but when something goes in, it will try to push it out of the closest Portal B",
  ),
  "portal_b": CellProfile(
    "Portal B",
    "A trash cell, but when something goes in, it will try to push it out of the closest Portal A",
  ),
  "invis_tool": CellProfile(
    "Invisibility Tool",
    "Toggle if a cell is invisible or not by clicking on it with this tool",
  ),
  "trick_tool": CellProfile(
    "Trickster Tool",
    "Will disguise the cell you click on into your currently selected cell",
  ),
  "inverse_airflow": CellProfile(
    "Inverse Airflow",
    "Super Vacuum but ignores Inverse Airflows",
  ),
  "supervacuum": CellProfile(
    "Super Vacuum",
    "Vacuum with infinite range",
  ),
  "transform_puzzle": CellProfile(
    "Transform Puzzle",
    "Puzzle cell but you can hold T and press arrow keys to act like transformer for that direction.",
  ),
  "math_number": CellProfile(
    "Number",
    "It stores a number",
  ),
  "math_plus": CellProfile(
    "Add",
    "Outputs the sum of the 2 inputs",
  ),
  "math_minus": CellProfile(
    "Subtract",
    "Outputs the difference between the first input and second input",
  ),
  "math_mult": CellProfile(
    "Multiply",
    "Outputs the product of the 2 inputs",
  ),
  "math_div": CellProfile(
    "Divide",
    "Outputs the first input divided by the 2nd input",
  ),
  "math_exp": CellProfile(
    "Exponent",
    "Outputs the first input raised to the power of second input",
  ),
  "math_sqrt": CellProfile(
    "Square Root",
    "Outputs the square root of the input",
  ),
  "math_abs": CellProfile(
    "Absolute",
    "Outputs the absolute value of the input",
  ),
  "math_floor": CellProfile(
    "Floor",
    "Outputs the input rounded down",
  ),
  "math_ceil": CellProfile(
    "Ceil",
    "Outputs the input rounded up",
  ),
  "math_log": CellProfile(
    "Natural Log",
    "Outputs the natural logarithm of the input",
  ),
  "math_logn": CellProfile(
    "LogN",
    "Outputs the logarithm base 2nd input of the 1st input",
  ),
  "math_min": CellProfile(
    "Minimum",
    "Outputs the lower value of the 2 inputs",
  ),
  "math_max": CellProfile(
    "Maximum",
    "Outputs the higher value of the 2 inputs",
  ),
  "math_rng": CellProfile(
    "Randomizer",
    "Outputs a random number between the first and second input",
  ),
  "math_prng": CellProfile(
    "Pseudo-Randomizer",
    "Outputs a pseudo-random number between the first and second input. It will always be the same sequence given the same grid size and position of the cell.",
  ),
  "math_sin": CellProfile(
    "Sine",
    "Outputs the sine of the input",
  ),
  "math_cos": CellProfile(
    "Cosine",
    "Outputs the cosine of the input",
  ),
  "math_tan": CellProfile(
    "Tan",
    "Outputs the tangent of the input",
  ),
  "math_pi": CellProfile(
    "π (PI)",
    "It is a constant roughly equal to $pi",
  ),
  "math_e": CellProfile(
    "E (Euler's Number)",
    "It is a constant roughly equal to $e",
  ),
  "math_phi": CellProfile(
    "Φ (The Golden Ratio)",
    "It is a constant roughly equal to ${(1 + sqrt(5)) / 2}",
  ),
  "math_infinity": CellProfile(
    "∞ (Infinity)",
    "A countable infinity. Not the biggest infinitely, but its as big as computers can handle",
  ),
  "math_tick": CellProfile(
    "Tick Count",
    "It holds the tick count",
  ),
  "math_time": CellProfile(
    "Grid Time",
    "It holds the tick count times the update delay.",
  ),
  "math_memreader": CellProfile(
    "Global Memory Reader",
    "It has the channel and index properties. It will output the value stored in the global math store in the specified channel at the specified index",
  ),
  "math_memwriter": CellProfile(
    "Global Memory Writer",
    "It has the channel and index properties. It will output the value you wrote, and modify the value in the global math store in the specified channel at the specified index to be equal to the input.",
  ),
  "math_memget": CellProfile(
    "Global Memory Getter",
    "Like a Global Memory Reader, except the channel and index aren't properties and instead are specified as the side parameters",
  ),
  "math_memset": CellProfile(
    "Global Memory Setter",
    "Like a Global Memory Writer, except the channel and index aren't properties and instead are specified as the side parameters",
  ),
  "math_tunnel": CellProfile(
    "Numerical Tunnel",
    "Used as a wire to connect an output and input. Is 2-way",
  ),
  "math_tunnel_cw": CellProfile(
    "Bent Numerical Tunnel",
    "A Numerical Tunnel but bent clockwise, still is 2-way",
  ),
  "math_cross_tunnel": CellProfile(
    "Numerical Cross Tunnel",
    "2 perpendicular Numerical Tunnels stacked on top of eachother",
  ),
  "math_equal": CellProfile(
    "Equal",
    "Checks if the 2 inputs are equal",
  ),
  "math_greater": CellProfile(
    "Greater",
    "Checks if the first input is greater than the second",
  ),
  "math_notequal": CellProfile(
    "Not Equal",
    "Checks if the 2 inputs aren't equal",
  ),
  "math_less": CellProfile(
    "Less",
    "Checks if the first input is less than the second",
  ),
  "math_greater_equal": CellProfile(
    "Greater or Equal",
    "Checks if the first input is greater than or equal to the second one",
  ),
  "math_less_equal": CellProfile(
    "Less or Equal",
    "Checks if the first input is less than or equal to the second one",
  ),
  "math_switch": CellProfile(
    "Mathematical Switch",
    "It takes A, B and C. A and B are on its sides, C is behind it. If C is above 0, it will output A. If C is less or equal to 0, it will output B",
  ),
  "math_mod": CellProfile(
    "Remainder",
    "Outputs the remainder of the first input divided by the 2nd input",
  ),
  "math_to_mech": CellProfile(
    "Math to Mechanical",
    "Checks if the number behind it is greater than its offset (0 by default) and if it is, it'll output a mechanical signal",
  ),
  "mech_to_math": CellProfile(
    "Mechanical to Math",
    "Checks if it has been powered, and if so, it'll output its scale (1 by default), otherwise, 0. It also writes its output, but ONLY when powered, thus, powering it off wont set the number in front to 0.",
  ),
  "math_sync": CellProfile(
    "Mathematical Sync",
    "It has 4-way normal update order, and is the last math cell to update. It'll cache the number behind it, thus, effectively delaying it. It's meant to simplify synchronizing complex mathematical equasions that have delayed parts due to update order",
  ),
  "spiketrap_biome": CellProfile(
    "Spiketrap Biome",
    "Like a Trash Biome, but, it also deletes itself",
  ),
  "spikefactory": CellProfile(
    "Spike Factory",
    "Spawns spiketrap biomes around it within a specified radius at a specified interval (in ticks)",
  ),
  "explosive": CellProfile(
    "Explosive",
    "Like a normal enemy, except it will explode within a specified radius (default of 1) with a specified effectiveness (default of 100%), leaving behind a specified cell (default of empty",
  ),
  "super_redirector": CellProfile(
    "Super Redirector",
    "A redirector that applies to all 4 sides",
  ),
  "factory": CellProfile(
    "Factory",
    "A generator that generates at a specified interval a specified cell, can be physical and the rotation offset is optional",
  ),
  "checkpoint": CellProfile(
    "Checkpoint",
    "When activated, and there are no more puzzle cells, it'll spawn one in front with the same rotation as this checkpoint unless told to reset it",
  ),
  "mech_checkpoint": CellProfile(
    "Mechanically Powered Checkpoint",
    "Checkpoint but activated mechanically",
  ),
  "mobile_enemy": CellProfile(
    "Mobile Enemy",
    "Like a Mobile Trash, but it also dies",
  ),
  "mover_trash": CellProfile(
    "Trash Mover",
    "A one-directional Mobile Trash that is also a mover",
  ),
  "mover_enemy": CellProfile(
    "Enemy Mover",
    "A one-directional Mobile Enemy that is also a mover",
  ),
  "lofter": CellProfile(
    "Lofter",
    "Puller + Grabber",
  ),
  "trash_can": CellProfile(
    "Trash Can",
    "Trash Cell with a remaining property, but when the remaining property is 0 or less it behaves like a push cell. Also, each time it eats cell it subtracts one from the remainig property.",
  ),
  "mech_enemy": CellProfile(
    "Mechanically Powered Enemy",
    "Only killable if it is powered",
  ),
  "mech_p_trash": CellProfile(
    "Mechanically Powered Trash",
    "Can only eat if it is powered",
  ),
  "bulldozer": CellProfile(
    "Bulldozer",
    "A mover with adjustable bias",
  ),
  "math_wireless_tunnel": CellProfile(
    "Wireless Numerical Tunnel",
    "A tunnel but wireless. It has an ID and a Target ID.",
  ),
  "math_safe_number": CellProfile(
    "Safe Number",
    "When read, it behaves the same as a normal number, however, when written, the value is stored in a temporary field. At the end of the math subtick, the value is updated to the one in that temporary field. Thus, this number can handle synchronization errors caused by update order.",
  ),
  "biome_norot": CellProfile(
    "Anti-Rotation Biome",
    "Prevents the cell above it from being rotated in any way.",
  ),
  "mech_mirror": CellProfile(
    "Mechanically Powered Mirror",
    "Mirror but powered mechanically",
  ),
  "master_get_camx": CellProfile(
    "Get Camera Central Point X",
    "Holds the approximate X coordinate of the screen's center point",
  ),
  "master_get_camy": CellProfile(
    "Get Camera Central Point Y",
    "Holds the approximate Y coordinate of the screen's center point",
  ),
  "master_get_mousex": CellProfile(
    "Get Mouse X",
    "Holds the approximate X coordinate of the mouse cursor",
  ),
  "master_get_mousey": CellProfile(
    "Get Mouse Y",
    "Holds the approximate Y coordinate of the mouse cursor",
  ),
  "master_get_rot": CellProfile(
    "Get Selected Cell Rotation",
    "Holds the currently stored rotation of the selected cell",
  ),
  "master_get_lastrot": CellProfile(
    "Get Selected Cell's Last Rotation",
    "Holds the reported last rotation of the selected cell",
  ),
  "master_has_id": CellProfile(
    "Check For Selected Cell ID Equality",
    "Checks if the selected cell's ID is equal to the stored cell ID",
  ),
  "master_has_idx": CellProfile(
    "Check For Selected Cell ID Equality To Index",
    "Checks if the selected cell's ID is equal to the cell ID at the index specified as the input",
  ),
  "unlock": CellProfile(
    "Unlocked Lock",
    "A lock that has already been unlocked. Acts like a push cell",
  ),
};

enum CellPropertyType {
  number,
  integer,
  text,
  boolean,
  cellID,
  cellRot,
  cell,
  background,
}

class CellProperty {
  String name;
  String key;
  CellPropertyType type;
  dynamic def;

  CellProperty(this.name, this.key, this.type, this.def);
}

Map<String, List<CellProperty>> props = {
  "math_number": [
    CellProperty("Count", "count", CellPropertyType.number, 0),
  ],
  "counter": [
    CellProperty("Count", "count", CellPropertyType.number, 0),
    CellProperty("Silent", "silent", CellPropertyType.boolean, false),
  ],
  "mech_trash": [
    CellProperty("Countdown", "countdown", CellPropertyType.integer, 0),
    CellProperty("Silent", "silent", CellPropertyType.boolean, false),
  ],
  "math_memwriter": [
    CellProperty("Channel", "channel", CellPropertyType.integer, 0),
    CellProperty("Index", "index", CellPropertyType.integer, 0),
  ],
  "math_memreader": [
    CellProperty("Channel", "channel", CellPropertyType.integer, 0),
    CellProperty("Index", "index", CellPropertyType.integer, 0),
  ],
  "math_to_mech": [
    CellProperty("Offset", "offset", CellPropertyType.number, 0),
  ],
  "mech_to_math": [
    CellProperty("Scale", "scale", CellPropertyType.number, 1),
  ],
  "spikefactory": [
    CellProperty("Interval", "interval", CellPropertyType.number, 1),
    CellProperty("Radius", "radius", CellPropertyType.integer, 1),
  ],
  "explosive": [
    CellProperty("Radius", "radius", CellPropertyType.integer, 1),
    CellProperty("Effectiveness", "effectiveness", CellPropertyType.number, 100),
    CellProperty("By-product", "byproduct", CellPropertyType.cell, "empty!0"),
    CellProperty("Circular", "circular", CellPropertyType.boolean, false),
    CellProperty("Mobile", "mobile", CellPropertyType.boolean, false),
    CellProperty("Pseudo-Random", "pseudorandom", CellPropertyType.boolean, false),
  ],
  "factory": [
    CellProperty("Cell", "cell", CellPropertyType.cell, "push!0"),
    CellProperty("Interval", "interval", CellPropertyType.number, 1),
    CellProperty("Add Rotation", "addrot", CellPropertyType.boolean, false),
    CellProperty("Physical", "physical", CellPropertyType.boolean, false),
    CellProperty("Quantized", "quantized", CellPropertyType.boolean, false),
  ],
  "checkpoint": [
    CellProperty("Reset other checkpoints", "checkpoint_reset", CellPropertyType.boolean, true),
    CellProperty("Enabled", "checkpoint_enabled", CellPropertyType.boolean, false),
    CellProperty("Reset Rotation", "reset_rot", CellPropertyType.boolean, false),
  ],
  "mech_checkpoint": [
    CellProperty("Reset other checkpoints", "checkpoint_reset", CellPropertyType.boolean, true),
    CellProperty("Enabled", "checkpoint_enabled", CellPropertyType.boolean, false),
    CellProperty("Reset Rotation", "reset_rot", CellPropertyType.boolean, false),
  ],
  "trash_can": [
    CellProperty("Remaining", "remaining", CellPropertyType.integer, 10),
    CellProperty("Silent", "silent", CellPropertyType.boolean, false),
  ],
  "mech_enemy": [
    CellProperty("Silent", "silent", CellPropertyType.boolean, false),
  ],
  "mech_p_trash": [
    CellProperty("Silent", "silent", CellPropertyType.boolean, false),
  ],
  "bulldozer": [
    CellProperty("Bias", "bias", CellPropertyType.integer, 0),
  ],
  "math_wireless_tunnel": [
    CellProperty("ID", "id", CellPropertyType.integer, 0),
    CellProperty("Target ID", "target", CellPropertyType.integer, 0),
  ],
  "math_safe_number": [
    CellProperty("Count", "count", CellPropertyType.number, 0),
  ],
  "master_has_id": [
    CellProperty("ID", "id", CellPropertyType.cellID, "empty"),
  ],
  "crystal": [
    CellProperty("ID", "id", CellPropertyType.integer, 0),
  ],
  "cancer": [
    CellProperty("ID", "id", CellPropertyType.integer, 0),
  ],
  "fire": [
    CellProperty("ID", "id", CellPropertyType.integer, 0),
  ],
  "plasma": [
    CellProperty("ID", "id", CellPropertyType.integer, 0),
  ],
  "lava": [
    CellProperty("ID", "id", CellPropertyType.integer, 0),
  ],
  "mech_sensor": [
    CellProperty("Offset", "offset", CellPropertyType.integer, 1),
  ],
  "mech_comparator": [
    CellProperty("Offset", "offset", CellPropertyType.integer, 1),
  ],
  "transformer": [
    CellProperty("Offset", "offset", CellPropertyType.integer, 1),
  ],
  "transformer_cw": [
    CellProperty("Offset", "offset", CellPropertyType.integer, 1),
  ],
  "transformer_ccw": [
    CellProperty("Offset", "offset", CellPropertyType.integer, 1),
  ],
  "transform_puzzle": [
    CellProperty("Offset", "offset", CellPropertyType.integer, 1),
  ],
};
